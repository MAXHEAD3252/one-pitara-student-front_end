git add .
git commit -m "notes chnage"
git push 


























erver Ip: http://103.151.107.117/  (Here the project is Running on the server. if you hit the server You will be redirected to the root file in the html)

#Server Setup Steps:

##Note : before these steps you need to build your app and in the dist file chnage the route to "/" (root).

1. the server software is Putty where you can connect the server using Ip address and port number. 
	Ip address : 103.151.107.117
	Port Number : 22022
2. after entring the server using putty we have to enter the login details of the server.
	login id : ubuntu
	password : Dexp@123$%
3. Then, Open FilZilla where you will transfer the files of the project 
	1. using ctrl + s you will open the site manager where the detilas to your server will be configured 
	2. Select the protocol option to SFTP
	3. Host Id 
	4. Port  
	5. Logon Type : Normal 
	6. user Id 
	7. Password
4. then simply you need to go on this file directory "/var/www" and select your file directory
5. the file directories that should be transfered in this are :-
	"assets", "media", ".htaccess","favicon.ico","index.html",splash-screen.css"
these all directories are present in dist folder after build of the app.

**Note : .htaccess is a configuration file used on web servers running the Apache HTTP Server software. The name "htaccess" is short for "hypertext access." This file allows you to configure various aspects of the server's behavior for a specific directory, without needing to alter server configuration files.




#Setup for Login user :
1. cleared all the access to the user registration as per the requirement of the project. 
2. changed the email -> username as required and they are using Yup (Yup is a JavaScript schema validation library.) and a schema for login is created.
3. here formik is used to manage react forms. called a function login to post the values of username and password. 
4. saving the auth to store the user in the Authcontext can have the value of the user is trying to access 
5. then we are trying to generate the user token so that we can have the userContext as well to maintain the state of the application on reloads also
6. here we are using user mobile number to validate the user in the database using axios post function to check the values of the user 
7. here are certain models defined already which help in to get the exat format data from the api so chnaged the suer model and made it similar to the the api data.
8. then simply returing the response from the api which then stores in the setcurrentUser state to create a new user 
9. where a useEffect is running to fetch the data of the user on everytime rendering of the page and call the getuserToken method to get the user and its detials else it "logout" the user to the login page.



##chnages of the day
request.ts create 2 new login functions for student 
chnage the private routes as per the condotion 
authpage chnage the routes of the logins




1. Loading Logo : if you want to change the Loading logo then you need to do chnages in index.html


Links :
https://www.digitalocean.com/community/tutorials/how-to-deploy-a-react-application-with-nginx-on-ubuntu-20-04
https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-20-04 (yeh jab kaam ayega jab domain to directly connect karna hai root se	)



extra saved codes :
import React, { useState } from "react";
import Highcharts from "highcharts";
import HighchartsReact from "highcharts-react-official";

const ChartComponent = () => {
  const [showOptimized, setShowOptimized] = useState(true);

  const toggleOptimized = () => {
    setShowOptimized(!showOptimized);
  };

  const options = {
    chart: {
      type: "column",
    },
    title: {
      text: "Efficiency Optimization by Branch",
    },
    xAxis: {
      categories: ["Seattle HQ", "San Francisco", "Tokyo"],
    },
    yAxis: [
      {
        min: 0,
        title: {
          text: "Employees",
        },
      },
      {
        title: {
          text: "Profit (millions)",
        },
        opposite: true,
      },
    ],
    legend: {
      shadow: false,
    },
    tooltip: {
      shared: true,
      positioner: function (labelWidth, labelHeight, point) {
        // Calculate the x position based on the category index
        const x = (point.plotX || 0) + 200; // Adjust 10 pixels for better alignment
        // Calculate the y position based on the category index and the y axis values
        const y = this.chart.yAxis[0].height - 100; // Adjust 10 pixels for better alignment
        return { x: x, y: y };
      },
    },
    plotOptions: {
      column: {
        grouping: false,
        shadow: false,
        borderWidth: 0,
      },
    },
    series: [
      {
        name: "Employees",
        color: "rgba(165,170,217,1)",
        data: [150, 73, 20],
        pointPadding: 0.35,
        pointPlacement: -0.2,
      },
      {
        name: "Employees Optimized",
        color: "rgba(126,86,134,.9)",
        data: [140, 90, 40],
        pointPadding: 0.4,
        pointPlacement: -0.2,
        visible: showOptimized, // Show/hide optimized plots based on state
      },
      {
        name: "Profit",
        color: "rgba(248,161,63,1)",
        data: [183.6, 178.8, 198.5],
        tooltip: {
          valuePrefix: "$",
          valueSuffix: " M",
        },
        pointPadding: 0.3,
        pointPlacement: 0.4,
        yAxis: 1,
      },
      {
        name: "Profit Optimized",
        color: "rgba(186,60,61,.9)",
        data: [203.6, 198.8, 208.5],
        tooltip: {
          valuePrefix: "$",
          valueSuffix: " M",
        },
        pointPadding: 0.4,
        pointPlacement: 0.4,
        yAxis: 1,
        visible: showOptimized,
      },
      {
        name: "Salary",
        color: "rgba(119, 152, 191, 1)",
        data: [70, 50, 30],
        pointPadding: 0.3,
        pointPlacement: 0.08,
      },
      {
        name: "Salary Optimized",
        color: "rgba(84, 105, 141, 0.9)",
        data: [65, 55, 35],
        pointPadding: 0.4,
        pointPlacement: 0.08,
        visible: showOptimized,
      },
    ],
  };

  return (
    <div>
      <HighchartsReact highcharts={Highcharts} options={options} />
      <button onClick={toggleOptimized}>Toggle Optimized</button>
    </div>
  );
};

export default ChartComponent;


